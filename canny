import numpy as np
import cv2

# It generates gaussian kernel which is to be convoluted with the grayscale image to reduce noise
# It returns gaussian kernel 
def generate_gaussian_kernel(size, sigma): 
    x, y = np.mgrid[-size//2 + 1:size//2 + 1, -size//2 + 1:size//2 + 1]
    normal = 1 / (2.0 * np.pi * sigma**2)
    gaussian_kernel = np.exp(-((x**2 + y**2) / (2.0*sigma**2))) * normal
    return gaussian_kernel

# This checks if there are any pixels with more intensity around it which is in its gradient direction 
# and suppress the pixels having a maximum around it
def non_maximum_suppression(G, theta):
    # Finding dimensions of the image
    N, M = G.shape
    # ... (previous code)
def non_maximum_suppression(G, theta):
    # Finding dimensions of the image
    N, M = G.shape

    # Initialize a zero matrix to store the result of non-maximum suppression
    suppressed = np.zeros((N, M), dtype=np.float32)

    # Convert theta (gradient directions) to positive values in the range [0, 180]
    theta = theta % 180

    # Perform non-maximum suppression
    for i in range(1, N - 1):
        for j in range(1, M - 1):
            angle = theta[i, j]

            # Determine the two neighboring pixels in the gradient direction
            if (0 <= angle < 22.5) or (157.5 <= angle <= 180):
                prev_pixel = G[i, j - 1]
                next_pixel = G[i, j + 1]
            elif 22.5 <= angle < 67.5:
                prev_pixel = G[i - 1, j - 1]
                next_pixel = G[i + 1, j + 1]
            elif 67.5 <= angle < 112.5:
                prev_pixel = G[i - 1, j]
                next_pixel = G[i + 1, j]
            else:
                prev_pixel = G[i + 1, j - 1]
                next_pixel = G[i - 1, j + 1]

            # Compare the current pixel's magnitude with its neighbors in the gradient direction
            if G[i, j] >= prev_pixel and G[i, j] >= next_pixel:
                suppressed[i, j] = G[i, j]
            else:
                suppressed[i, j] = 0

    return suppressed
    return G

# Perform hysteresis thresholding to determine strong and weak edges.
def hysteresis_thresholding(img, t1, t2, edge_map):
    # ... (previous code)
def non_maximum_suppression(G, theta):
    # Finding dimensions of the image
    N, M = G.shape

    # Initialize a zero matrix to store the result of non-maximum suppression
    suppressed = np.zeros((N, M), dtype=np.float32)

    # Convert theta (gradient directions) to positive values in the range [0, 180]
    theta = theta % 180

    # Perform non-maximum suppression
    for i in range(1, N - 1):
        for j in range(1, M - 1):
            angle = theta[i, j]

            # Determine the two neighboring pixels in the gradient direction
            if (0 <= angle < 22.5) or (157.5 <= angle <= 180):
                prev_pixel = G[i, j - 1]
                next_pixel = G[i, j + 1]
            elif 22.5 <= angle < 67.5:
                prev_pixel = G[i - 1, j - 1]
                next_pixel = G[i + 1, j + 1]
            elif 67.5 <= angle < 112.5:
                prev_pixel = G[i - 1, j]
                next_pixel = G[i + 1, j]
            else:
                prev_pixel = G[i + 1, j - 1]
                next_pixel = G[i - 1, j + 1]

            # Compare the current pixel's magnitude with its neighbors in the gradient direction
            if G[i, j] >= prev_pixel and G[i, j] >= next_pixel:
                suppressed[i, j] = G[i, j]
            else:
                suppressed[i, j] = 0

    return suppressed
    return edge_map

# Applies convolution to the given image and the kernel matrix
def apply_convolution(img, kernel):
    M, N = img.shape
    m, n = kernel.shape

    # Initialize output variable
    output = np.zeros((M, N), dtype=np.float32)

    # ... (previous code)
def non_maximum_suppression(G, theta):
    # Finding dimensions of the image
    N, M = G.shape

    # Initialize a zero matrix to store the result of non-maximum suppression
    suppressed = np.zeros((N, M), dtype=np.float32)

    # Convert theta (gradient directions) to positive values in the range [0, 180]
    theta = theta % 180

    # Perform non-maximum suppression
    for i in range(1, N - 1):
        for j in range(1, M - 1):
            angle = theta[i, j]

            # Determine the two neighboring pixels in the gradient direction
            if (0 <= angle < 22.5) or (157.5 <= angle <= 180):
                prev_pixel = G[i, j - 1]
                next_pixel = G[i, j + 1]
            elif 22.5 <= angle < 67.5:
                prev_pixel = G[i - 1, j - 1]
                next_pixel = G[i + 1, j + 1]
            elif 67.5 <= angle < 112.5:
                prev_pixel = G[i - 1, j]
                next_pixel = G[i + 1, j]
            else:
                prev_pixel = G[i + 1, j - 1]
                next_pixel = G[i - 1, j + 1]

            # Compare the current pixel's magnitude with its neighbors in the gradient direction
            if G[i, j] >= prev_pixel and G[i, j] >= next_pixel:
                suppressed[i, j] = G[i, j]
            else:
                suppressed[i, j] = 0

    return suppressed

    return output

# Finds the gradient by using sobel operators
def sobel_op(img):
    dx_kernel = np.array([[-1, 0, 1],
                          [-2, 0, 2],
                          [-1, 0, 1]], dtype=np.float32)

    dy_kernel = np.array([[-1, -2, -1],
                          [0, 0, 0],
                          [1, 2, 1]], dtype=np.float32)

    dx = np.zeros_like(img, dtype=np.float32)
    dy = np.zeros_like(img, dtype=np.float32)

    height, width = img.shape

    for i in range(1, height - 1):
        for j in range(1, width - 1):
            dx[i, j] = np.sum(img[i-1:i+2, j-1:j+2] * dx_kernel)
            dy[i, j] = np.sum(img[i-1:i+2, j-1:j+2] * dy_kernel)

    return dx, dy

# Final Canny detector function
def Canny_detector(img, sigma, t1, t2):
    # Step 1: Convert given image to grayscale image
    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = img_gray
    
    # Step 2: Apply Gaussian filter to smooth the image
    kernel_size = int(2 * round(3 * sigma) + 1)
    gaussian_kernel = generate_gaussian_kernel(kernel_size, sigma)   
    img_smooth = apply_convolution(img, gaussian_kernel)
    smooth_img = img_smooth
    
    # Step 3: Compute gradient magnitude and direction using Sobel operators
    gx, gy = sobel_op(img)
    G_mag = np.sqrt(gx**2 + gy**2)
    G_dir = np.arctan2(gy, gx) * (180.0 / np.pi)
    
    # Step 4: Perform non-maximum suppression to thin the edges
    G_suppressed = non_maximum_suppression(G_mag, G_dir)

    # Step 5: Perform hysteresis thresholding to detect strong and weak edges
    edge_image = hysteresis_thresholding(G_suppressed, t1, t2, G_suppressed)

    return img_gray, smooth_img, edge_image

# Run the Canny detector on the input image "a.jpeg"
img = cv2.imread("a.jpeg")
sigma = 0.7
t1 = 0.05
t2 = 0.15

img_gray, img_smooth, img_op = Canny_detector(img, sigma, t1, t2)

cv2.imwrite("img_gray.jpeg", img_gray)
cv2.imwrite("img_smooth.jpeg", img_smooth)
cv2.imwrite("img_op.jpeg", img_op)
